use dep::std::println;
use dep::bigint::prime_field::PrimeField as Fp;
use dep::bls12_381::bls12_381;

fn main(x : Field, y : pub Field) {
    test_verify_bls_signature();
    //assert(x != y);
}

#[test]
fn test_main() {
    //main(1, 2);
    // Uncomment to make test fail
    // main(1, 1);

}

#[test]
fn test_bls12_381_add1() {
    let bls12_381::BLS12_381 { curve } = bls12_381::bls12_381();

    let p = curve.add(bls12_381::Point::zero(), bls12_381::Point::zero());
    assert(p.is_zero()); 
}

#[test]
fn test_verify_bls_signature() {
    let g2: bls12_381::BLS12_381G2 = bls12_381::bls12_381_g2();
    let g1: bls12_381::BLS12_381 = bls12_381::bls12_381();
    
    let SIGNATURE_X: bls12_381::Fp2 = bls12_381::Fp2::new(
        bls12_381::Fp::from_bytes(
                    [
                        0x29, 0x0b, 0x0e, 0x34, 0x32, 0x50, 0x16, 0x12,
                        0x27, 0x7a, 0xca, 0x7b, 0x36, 0x15, 0xe1, 0xa5,
                        0x2d, 0xed, 0x21, 0x22, 0x0c, 0x2a, 0xc7, 0xf3,
                        0x33, 0x22, 0xea, 0xe2, 0x8d, 0x43, 0x48, 0x7e,
                        0x34, 0x2d, 0xd5, 0xe7, 0x90, 0xb2, 0x60, 0x53,
                        0x51, 0x06, 0x6b, 0xd8, 0xc1, 0x2e, 0x26, 0x09
                    ]
                ),
        bls12_381::Fp::from_bytes(
                    [
                        0x5d, 0x10, 0x4c, 0x6f, 0xcf, 0x76, 0x6a, 0xa9,
                        0x78, 0x65, 0x8a, 0xd9, 0x61, 0x9f, 0x7c, 0xd6,
                        0x10, 0x25, 0xe4, 0x99, 0x27, 0xd3, 0x0a, 0xf7,
                        0xf9, 0xfd, 0x5d, 0x23, 0xfc, 0x0d, 0xcd, 0x55,
                        0xab, 0x07, 0x27, 0xbe, 0x81, 0x0d, 0xe1, 0x01,
                        0xae, 0x63, 0x5a, 0x43, 0xc5, 0xce, 0x8c
                    ]
                )
    );

    let SIGNATURE_Y: bls12_381::Fp2 = bls12_381::Fp2::new(
        bls12_381::Fp::from_bytes(
                    [
                        0x16, 0x91, 0xf0, 0x40, 0x9c, 0x72, 0xea, 0x2c,
                        0xe7, 0xd2, 0xdb, 0x46, 0x66, 0x24, 0xac, 0x8d,
                        0x8b, 0x0d, 0xbb, 0x41, 0xb9, 0x45, 0x46, 0x3c,
                        0x56, 0x03, 0x10, 0x04, 0x3c, 0x72, 0xd1, 0xce,
                        0x89, 0x4d, 0x49, 0x7d, 0x25, 0xa4, 0x72, 0x66,
                        0x65, 0x95, 0x26, 0x55, 0x9c, 0xe7, 0x20, 0x14
                    ]
                ),
        bls12_381::Fp::from_bytes(
                    [
                        0xde, 0x6f, 0x6b, 0x3f, 0x42, 0x5a, 0x37, 0x1e,
                        0xc9, 0x37, 0xad, 0x2d, 0x71, 0x07, 0x41, 0x83,
                        0xc4, 0xd3, 0x0e, 0x22, 0x7e, 0x25, 0x71, 0x9b,
                        0x6f, 0x4a, 0x95, 0x6e, 0x60, 0x12, 0x74, 0xbf,
                        0x12, 0xe5, 0x26, 0x16, 0xc4, 0x05, 0x65, 0x71,
                        0xbe, 0x1f, 0x3f, 0x1e, 0x82, 0x38, 0x0f, 0x02
                    ]
                )
    );

    let SIGNATURE: bls12_381::G2Point = bls12_381::G2Point::from_affine(
                SIGNATURE_X,
                SIGNATURE_Y);

    let MESSAGE_HASH_X: bls12_381::Fp2 = bls12_381::Fp2::new(
        bls12_381::Fp::from_bytes(
                    [
                        0x7d, 0x58, 0xbc, 0xa0, 0xa0, 0x70, 0xf9, 0x64,
                        0xa7, 0x43, 0xa8, 0xd0, 0xfe, 0xb1, 0x5e, 0x23,
                        0x19, 0x52, 0xa2, 0x2c, 0x4f, 0xf1, 0xc5, 0x0c,
                        0xf8, 0x2c, 0x9f, 0x93, 0xe5, 0x8a, 0xb9, 0x9a,
                        0x08, 0xa7, 0x4a, 0x8c, 0x7d, 0x4f, 0xf6, 0x9d,
                        0x99, 0x39, 0x47, 0x59, 0x72, 0xb6, 0xd9, 0x03
                    ]
                ),
        bls12_381::Fp::from_bytes(
                    [
                        0x5a, 0x3e, 0x48, 0xfd, 0xbc, 0xef, 0xc1, 0x2d,
                        0xe5, 0xe9, 0x41, 0xb1, 0xb4, 0xed, 0x9e, 0x1f,
                        0xc6, 0xeb, 0x0d, 0x9c, 0xc3, 0xc0, 0x78, 0x45,
                        0xf2, 0xf1, 0x32, 0x97, 0x4f, 0xd4, 0xc5, 0x8b,
                        0x8f, 0x27, 0x5a, 0x1f, 0x58, 0x89, 0xe4, 0xf4,
                        0x09, 0xe8, 0xb3, 0x59, 0x2d, 0x14, 0x1d, 0x16
                    ]
                )
    );

    let MESSAGE_HASH_Y: bls12_381::Fp2 = bls12_381::Fp2::new(
        bls12_381::Fp::from_bytes(
                    [
                        0xa4, 0x4d, 0xe1, 0xba, 0xde, 0x0a, 0xdf, 0x2c,
                        0x88, 0xd7, 0xe2, 0x94, 0x81, 0x00, 0x4a, 0x5e,
                        0xdb, 0x86, 0xbb, 0x78, 0xed, 0x25, 0x74, 0x4e,
                        0xde, 0x43, 0xa6, 0x72, 0x78, 0x84, 0xeb, 0x04,
                        0x93, 0xe8, 0xa1, 0x41, 0x6d, 0x12, 0xcf, 0xe7,
                        0x9f, 0x19, 0x0d, 0xbf, 0x21, 0x13, 0x69
                    ]
                ),
        bls12_381::Fp::from_bytes(
                    [
                        0x84, 0x84, 0x70, 0xf8, 0x6c, 0xea, 0x4a, 0x36,
                        0x53, 0x6e, 0x26, 0x39, 0x93, 0x19, 0x67, 0x1a,
                        0x54, 0xdc, 0xf0, 0x18, 0x0d, 0x3a, 0xf6, 0x2f,
                        0x10, 0x53, 0x1a, 0x78, 0x33, 0x00, 0xbe, 0xaf,
                        0x09, 0xce, 0x6f, 0x33, 0xeb, 0xf8, 0xb8, 0xe0,
                        0x8b, 0x7d, 0xa0, 0xcb, 0x04, 0x5b, 0xbf, 0x18
                    ]
                )
    );

    let MESSAGE_HASH: bls12_381::G2Point = bls12_381::G2Point::from_affine(
                MESSAGE_HASH_X,
                MESSAGE_HASH_Y);

    let PUBLIC_KEY: bls12_381::Point = bls12_381::Point::from_affine( 
        bls12_381::Fp::from_bytes(
            [
                0xbb, 0xc6, 0x22, 0xdb, 0x0a, 0xf0, 0x3a, 0xfb,
                0xef, 0x1a, 0x7a, 0xf9, 0x3f, 0xe8, 0x55, 0x6c,
                0x58, 0xac, 0x1b, 0x17, 0x3f, 0x3a, 0x4e, 0xa1,
                0x05, 0xb9, 0x74, 0x97, 0x4f, 0x8c, 0x68, 0xc3,
                0x0f, 0xac, 0xa9, 0x4f, 0x8c, 0x63, 0x95, 0x26,
                0x94, 0xd7, 0x97, 0x31, 0xa7, 0xd3, 0xf1, 0x17
            ]
        ),
        bls12_381::Fp::from_bytes(
            [
                0xe1, 0xe7, 0xc5, 0x46, 0x29, 0x23, 0xaa, 0x0c,
                0xe4, 0x8a, 0x88, 0xa2, 0x44, 0xc7, 0x3c, 0xd0,
                0xed, 0xb3, 0x04, 0x2c, 0xcb, 0x18, 0xdb, 0x00,
                0xf6, 0x0a, 0xd0, 0xd5, 0x95, 0xe0, 0xf5, 0xfc,
                0xe4, 0x8a, 0x1d, 0x74, 0xed, 0x30, 0x9e, 0xa0,
                0xf1, 0xa0, 0xaa, 0xe3, 0x81, 0xf4, 0xb3, 0x08
            ]
        ),
    );



    bls12_381::signature::verify_bls_signature(SIGNATURE, PUBLIC_KEY, MESSAGE_HASH);
}